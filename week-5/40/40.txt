- Why does the program break in step 2 of the previous exercise?

The header file data.h did not mention the member "std::string d_text" when
the library had been compiled first and the object file main.o was linked to
it. Then, the new member was added and the library was recompiled. Main.o was
not compiled using the new header file that contained the member,
but instead using the old one.
Hence, main.o resorts to a header file that declares the member function
"bool read()" but where the member "std::string d_text" is not declared.
Furthermore, in the older version of the library that this header file was
published with, the member function "bool read()" does not work with a member
"std::string d_text" in its implementation.
However, in the newer version of the library, the header file declares the
member "std::string d_text" and that member is worked with in the member
function "bool read()". Hence, when the file main.o is compiled with the new
version of the library, it still has the old ABI of the library where
"std::string d_text" had not been declared, and upon calling "bool read()",
the ABI breaks as the new version of the function works with an undeclared
member.



- Why doesn't the program break anymore when using a pointer to the
implementation?

With the pimpl approach, the header file that is included in main.cc never
changes. All the member functions of the class Data now use the d_pimpl member
which is a pointer to a DataImp object. Hence, the program doesn't break if we
add to the DataImp class since everything we add to it is compiled within the
library libdata.a, and moreover we never change the implementation of the Data
class itself. Therefore, no new members could ever appear in its
implementation that were not present in previous versions of the header file
data.h.



- Without the pimple approach: how can these additional data members be added
to your class without breaking the ABI?

In this case, I would create an abstract class that I would let my class
inherit from. Abstract classes are classes that can not be instantiated
directly, and are just used to define common members and properties of
subclasses that are similar. A class can be made abstract by declaring at
least one of its functions as "pure virtual".

Hence, I would declare the
abstract class and include the two new data members that I want to add in
there. Subsequently, I would let my old class inherit from this class. As a
result, I can now access the new data members in all the member functions of
the old class now, and the ABI will not be broken either, because the header
file of the old class is not changed with the new update. As a consequence,
when my new updated library is linked to an object file of one of the users,
the member functions can just access the new members, as they were declared in
the abstract class and thus the old header file which my users use to link the
library does not need to have them declared which results in the ABI not
breaking